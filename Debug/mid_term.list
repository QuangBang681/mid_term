
mid_term.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d44  08002d44  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002d44  08002d44  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d44  08002d44  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000048  08002d94  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002d94  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008738  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001969  00000000  00000000  000287a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a3c  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b300  00000000  00000000  00041e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f8a  00000000  00000000  0004d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf11e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f0  00000000  00000000  000cf170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d0c 	.word	0x08002d0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002d0c 	.word	0x08002d0c

0800014c <RESETPressed>:
int TimerForKeyPress_RESET = 200;
int TimerForKeyPress_INC = 200;
int TimerForKeyPress_DEC = 200;

int RESETPressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (RESET_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <RESETPressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <RESETPressed+0x16>
	{
		RESET_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <RESETPressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <RESETPressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000064 	.word	0x20000064

08000170 <INCPressed>:

int INCPressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (INC_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <INCPressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <INCPressed+0x16>
	{
		INC_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <INCPressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <INCPressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000068 	.word	0x20000068

08000194 <DECPressed>:

int DECPressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (DEC_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <DECPressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <DECPressed+0x16>
	{
		DEC_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <DECPressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <DECPressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000006c 	.word	0x2000006c

080001b8 <subKeyProcess_RESET>:

void subKeyProcess_RESET()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	RESET_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess_RESET+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000064 	.word	0x20000064

080001d0 <getKeyInput_RESET>:

void getKeyInput_RESET()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	KeyReg0_RESET = KeyReg1_RESET;
 80001d4:	4b22      	ldr	r3, [pc, #136]	; (8000260 <getKeyInput_RESET+0x90>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a22      	ldr	r2, [pc, #136]	; (8000264 <getKeyInput_RESET+0x94>)
 80001da:	6013      	str	r3, [r2, #0]
	KeyReg1_RESET = KeyReg2_RESET;
 80001dc:	4b22      	ldr	r3, [pc, #136]	; (8000268 <getKeyInput_RESET+0x98>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <getKeyInput_RESET+0x90>)
 80001e2:	6013      	str	r3, [r2, #0]
	KeyReg2_RESET = HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	4820      	ldr	r0, [pc, #128]	; (800026c <getKeyInput_RESET+0x9c>)
 80001ea:	f001 fd4f 	bl	8001c8c <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <getKeyInput_RESET+0x98>)
 80001f4:	601a      	str	r2, [r3, #0]
	if((KeyReg0_RESET == KeyReg1_RESET) && (KeyReg1_RESET == KeyReg2_RESET))
 80001f6:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <getKeyInput_RESET+0x94>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <getKeyInput_RESET+0x90>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d12c      	bne.n	800025c <getKeyInput_RESET+0x8c>
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <getKeyInput_RESET+0x90>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <getKeyInput_RESET+0x98>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d126      	bne.n	800025c <getKeyInput_RESET+0x8c>
	{
		if(KeyReg3_RESET != KeyReg2_RESET)
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <getKeyInput_RESET+0xa0>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKeyInput_RESET+0x98>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d00e      	beq.n	8000238 <getKeyInput_RESET+0x68>
		{
			KeyReg3_RESET = KeyReg2_RESET;
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput_RESET+0x98>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a14      	ldr	r2, [pc, #80]	; (8000270 <getKeyInput_RESET+0xa0>)
 8000220:	6013      	str	r3, [r2, #0]
			if(KeyReg2_RESET == PRESSED_STATE)
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <getKeyInput_RESET+0x98>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d118      	bne.n	800025c <getKeyInput_RESET+0x8c>
			{
				subKeyProcess_RESET();
 800022a:	f7ff ffc5 	bl	80001b8 <subKeyProcess_RESET>
				TimerForKeyPress_RESET = 300;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <getKeyInput_RESET+0xa4>)
 8000230:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000234:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress_RESET = 100;
			}
		}
	}
}
 8000236:	e011      	b.n	800025c <getKeyInput_RESET+0x8c>
			TimerForKeyPress_RESET--;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <getKeyInput_RESET+0xa4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3b01      	subs	r3, #1
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <getKeyInput_RESET+0xa4>)
 8000240:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_RESET == 0)
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <getKeyInput_RESET+0xa4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d108      	bne.n	800025c <getKeyInput_RESET+0x8c>
				if(KeyReg2_RESET == PRESSED_STATE)
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <getKeyInput_RESET+0x98>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d101      	bne.n	8000256 <getKeyInput_RESET+0x86>
					subKeyProcess_RESET();
 8000252:	f7ff ffb1 	bl	80001b8 <subKeyProcess_RESET>
				TimerForKeyPress_RESET = 100;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <getKeyInput_RESET+0xa4>)
 8000258:	2264      	movs	r2, #100	; 0x64
 800025a:	601a      	str	r2, [r3, #0]
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	40011000 	.word	0x40011000
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000030 	.word	0x20000030

08000278 <subKeyProcess_INC>:
void subKeyProcess_INC()
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	INC_flag = 1;
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <subKeyProcess_INC+0x14>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	20000068 	.word	0x20000068

08000290 <getKeyInput_INC>:

void getKeyInput_INC()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	KeyReg0_INC = KeyReg1_INC;
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <getKeyInput_INC+0x90>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a22      	ldr	r2, [pc, #136]	; (8000324 <getKeyInput_INC+0x94>)
 800029a:	6013      	str	r3, [r2, #0]
	KeyReg1_INC = KeyReg2_INC;
 800029c:	4b22      	ldr	r3, [pc, #136]	; (8000328 <getKeyInput_INC+0x98>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1f      	ldr	r2, [pc, #124]	; (8000320 <getKeyInput_INC+0x90>)
 80002a2:	6013      	str	r3, [r2, #0]
	KeyReg2_INC = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 80002a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a8:	4820      	ldr	r0, [pc, #128]	; (800032c <getKeyInput_INC+0x9c>)
 80002aa:	f001 fcef 	bl	8001c8c <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <getKeyInput_INC+0x98>)
 80002b4:	601a      	str	r2, [r3, #0]
	if((KeyReg0_INC == KeyReg1_INC) && (KeyReg1_INC == KeyReg2_INC))
 80002b6:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <getKeyInput_INC+0x94>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b19      	ldr	r3, [pc, #100]	; (8000320 <getKeyInput_INC+0x90>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d12c      	bne.n	800031c <getKeyInput_INC+0x8c>
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <getKeyInput_INC+0x90>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <getKeyInput_INC+0x98>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d126      	bne.n	800031c <getKeyInput_INC+0x8c>
	{
		if(KeyReg3_INC != KeyReg2_INC)
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <getKeyInput_INC+0xa0>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput_INC+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d00e      	beq.n	80002f8 <getKeyInput_INC+0x68>
		{
			KeyReg3_INC = KeyReg2_INC;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <getKeyInput_INC+0x98>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <getKeyInput_INC+0xa0>)
 80002e0:	6013      	str	r3, [r2, #0]
			if(KeyReg2_INC == PRESSED_STATE)
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <getKeyInput_INC+0x98>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d118      	bne.n	800031c <getKeyInput_INC+0x8c>
			{
				subKeyProcess_INC();
 80002ea:	f7ff ffc5 	bl	8000278 <subKeyProcess_INC>
				TimerForKeyPress_INC = 300;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <getKeyInput_INC+0xa4>)
 80002f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002f4:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress_INC = 100;
			}
		}
	}
}
 80002f6:	e011      	b.n	800031c <getKeyInput_INC+0x8c>
			TimerForKeyPress_INC--;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput_INC+0xa4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <getKeyInput_INC+0xa4>)
 8000300:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_INC == 0)
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput_INC+0xa4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <getKeyInput_INC+0x8c>
				if(KeyReg2_INC == PRESSED_STATE)
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <getKeyInput_INC+0x98>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d101      	bne.n	8000316 <getKeyInput_INC+0x86>
					subKeyProcess_INC();
 8000312:	f7ff ffb1 	bl	8000278 <subKeyProcess_INC>
				TimerForKeyPress_INC = 100;
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <getKeyInput_INC+0xa4>)
 8000318:	2264      	movs	r2, #100	; 0x64
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40011000 	.word	0x40011000
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <subKeyProcess_DEC>:
void subKeyProcess_DEC()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	DEC_flag = 1;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <subKeyProcess_DEC+0x14>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	2000006c 	.word	0x2000006c

08000350 <getKeyInput_DEC>:

void getKeyInput_DEC()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	KeyReg0_DEC = KeyReg1_DEC;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <getKeyInput_DEC+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <getKeyInput_DEC+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
	KeyReg1_DEC = KeyReg2_DEC;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <getKeyInput_DEC+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <getKeyInput_DEC+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
	KeyReg2_DEC = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <getKeyInput_DEC+0x9c>)
 800036a:	f001 fc8f 	bl	8001c8c <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <getKeyInput_DEC+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
	if((KeyReg0_DEC == KeyReg1_DEC) && (KeyReg1_DEC == KeyReg2_DEC))
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <getKeyInput_DEC+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <getKeyInput_DEC+0x90>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12c      	bne.n	80003dc <getKeyInput_DEC+0x8c>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <getKeyInput_DEC+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <getKeyInput_DEC+0x98>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d126      	bne.n	80003dc <getKeyInput_DEC+0x8c>
	{
		if(KeyReg3_DEC != KeyReg2_DEC)
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <getKeyInput_DEC+0xa0>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <getKeyInput_DEC+0x98>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00e      	beq.n	80003b8 <getKeyInput_DEC+0x68>
		{
			KeyReg3_DEC = KeyReg2_DEC;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <getKeyInput_DEC+0x98>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <getKeyInput_DEC+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]
			if(KeyReg2_DEC == PRESSED_STATE)
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <getKeyInput_DEC+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d118      	bne.n	80003dc <getKeyInput_DEC+0x8c>
			{
				subKeyProcess_DEC();
 80003aa:	f7ff ffc5 	bl	8000338 <subKeyProcess_DEC>
				TimerForKeyPress_DEC = 300;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <getKeyInput_DEC+0xa4>)
 80003b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003b4:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress_DEC = 100;
			}
		}
	}
}
 80003b6:	e011      	b.n	80003dc <getKeyInput_DEC+0x8c>
			TimerForKeyPress_DEC--;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <getKeyInput_DEC+0xa4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <getKeyInput_DEC+0xa4>)
 80003c0:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_DEC == 0)
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <getKeyInput_DEC+0xa4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d108      	bne.n	80003dc <getKeyInput_DEC+0x8c>
				if(KeyReg2_DEC == PRESSED_STATE)
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <getKeyInput_DEC+0x98>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d101      	bne.n	80003d6 <getKeyInput_DEC+0x86>
					subKeyProcess_DEC();
 80003d2:	f7ff ffb1 	bl	8000338 <subKeyProcess_DEC>
				TimerForKeyPress_DEC = 100;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <getKeyInput_DEC+0xa4>)
 80003d8:	2264      	movs	r2, #100	; 0x64
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000024 	.word	0x20000024
 80003e4:	20000020 	.word	0x20000020
 80003e8:	20000028 	.word	0x20000028
 80003ec:	40011000 	.word	0x40011000
 80003f0:	2000002c 	.word	0x2000002c
 80003f4:	20000038 	.word	0x20000038

080003f8 <fsm_automatic_run>:


#include "fsm_automatic.h"

void fsm_automatic_run()
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	switch(status)
 80003fc:	4bb0      	ldr	r3, [pc, #704]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3b14      	subs	r3, #20
 8000402:	2b09      	cmp	r3, #9
 8000404:	f200 8371 	bhi.w	8000aea <fsm_automatic_run+0x6f2>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <fsm_automatic_run+0x18>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000439 	.word	0x08000439
 8000414:	080004c9 	.word	0x080004c9
 8000418:	08000571 	.word	0x08000571
 800041c:	08000619 	.word	0x08000619
 8000420:	080006cd 	.word	0x080006cd
 8000424:	08000775 	.word	0x08000775
 8000428:	0800081d 	.word	0x0800081d
 800042c:	080008c5 	.word	0x080008c5
 8000430:	08000979 	.word	0x08000979
 8000434:	08000a1f 	.word	0x08000a1f
	{
		case AUTONUM_0:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);  //0
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	48a1      	ldr	r0, [pc, #644]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800043e:	f001 fc3c 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2102      	movs	r1, #2
 8000446:	489f      	ldr	r0, [pc, #636]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000448:	f001 fc37 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2104      	movs	r1, #4
 8000450:	489c      	ldr	r0, [pc, #624]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000452:	f001 fc32 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2108      	movs	r1, #8
 800045a:	489a      	ldr	r0, [pc, #616]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800045c:	f001 fc2d 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2110      	movs	r1, #16
 8000464:	4897      	ldr	r0, [pc, #604]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000466:	f001 fc28 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	4895      	ldr	r0, [pc, #596]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000470:	f001 fc23 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4892      	ldr	r0, [pc, #584]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800047a:	f001 fc1e 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 800047e:	4b92      	ldr	r3, [pc, #584]	; (80006c8 <fsm_automatic_run+0x2d0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d106      	bne.n	8000494 <fsm_automatic_run+0x9c>
				{
					status = AUTONUM_0;
 8000486:	4b8e      	ldr	r3, [pc, #568]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000488:	2214      	movs	r2, #20
 800048a:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800048c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000490:	f000 fff2 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000494:	f7ff fe6c 	bl	8000170 <INCPressed>
 8000498:	4603      	mov	r3, r0
 800049a:	2b01      	cmp	r3, #1
 800049c:	d106      	bne.n	80004ac <fsm_automatic_run+0xb4>
				{
					status = NUM_1;
 800049e:	4b88      	ldr	r3, [pc, #544]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80004a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80004a8:	f000 ffe6 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 80004ac:	f7ff fe72 	bl	8000194 <DECPressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	f040 8306 	bne.w	8000ac4 <fsm_automatic_run+0x6cc>
				{
					status = NUM_9;
 80004b8:	4b81      	ldr	r3, [pc, #516]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80004ba:	2209      	movs	r2, #9
 80004bc:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80004be:	f242 7010 	movw	r0, #10000	; 0x2710
 80004c2:	f000 ffd9 	bl	8001478 <setTimer1>
				}

			break;
 80004c6:	e2fd      	b.n	8000ac4 <fsm_automatic_run+0x6cc>
		case AUTONUM_1:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, SET);	//1
 80004c8:	2201      	movs	r2, #1
 80004ca:	2101      	movs	r1, #1
 80004cc:	487d      	ldr	r0, [pc, #500]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80004ce:	f001 fbf4 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2102      	movs	r1, #2
 80004d6:	487b      	ldr	r0, [pc, #492]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80004d8:	f001 fbef 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	4878      	ldr	r0, [pc, #480]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80004e2:	f001 fbea 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2108      	movs	r1, #8
 80004ea:	4876      	ldr	r0, [pc, #472]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80004ec:	f001 fbe5 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4873      	ldr	r0, [pc, #460]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80004f6:	f001 fbe0 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2120      	movs	r1, #32
 80004fe:	4871      	ldr	r0, [pc, #452]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000500:	f001 fbdb 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	486e      	ldr	r0, [pc, #440]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800050a:	f001 fbd6 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 800050e:	4b6e      	ldr	r3, [pc, #440]	; (80006c8 <fsm_automatic_run+0x2d0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d106      	bne.n	8000524 <fsm_automatic_run+0x12c>
				{
					status = AUTONUM_0;
 8000516:	4b6a      	ldr	r3, [pc, #424]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000518:	2214      	movs	r2, #20
 800051a:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800051c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000520:	f000 ffaa 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000524:	f7ff fe24 	bl	8000170 <INCPressed>
 8000528:	4603      	mov	r3, r0
 800052a:	2b01      	cmp	r3, #1
 800052c:	d106      	bne.n	800053c <fsm_automatic_run+0x144>
				{
					status = NUM_2;
 800052e:	4b64      	ldr	r3, [pc, #400]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000530:	2202      	movs	r2, #2
 8000532:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000534:	f242 7010 	movw	r0, #10000	; 0x2710
 8000538:	f000 ff9e 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 800053c:	f7ff fe2a 	bl	8000194 <DECPressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d106      	bne.n	8000554 <fsm_automatic_run+0x15c>
				{
					status = NUM_0;
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800054c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000550:	f000 ff92 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000554:	f7ff fdfa 	bl	800014c <RESETPressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	f040 82b4 	bne.w	8000ac8 <fsm_automatic_run+0x6d0>
				{
					status = NUM_0;
 8000560:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000566:	f242 7010 	movw	r0, #10000	; 0x2710
 800056a:	f000 ff85 	bl	8001478 <setTimer1>
				}

			break;
 800056e:	e2ab      	b.n	8000ac8 <fsm_automatic_run+0x6d0>
		case AUTONUM_2:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//2
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	4853      	ldr	r0, [pc, #332]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000576:	f001 fba0 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	4851      	ldr	r0, [pc, #324]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000580:	f001 fb9b 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2104      	movs	r1, #4
 8000588:	484e      	ldr	r0, [pc, #312]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800058a:	f001 fb96 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	484c      	ldr	r0, [pc, #304]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000594:	f001 fb91 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4849      	ldr	r0, [pc, #292]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800059e:	f001 fb8c 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4847      	ldr	r0, [pc, #284]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80005a8:	f001 fb87 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4844      	ldr	r0, [pc, #272]	; (80006c4 <fsm_automatic_run+0x2cc>)
 80005b2:	f001 fb82 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 80005b6:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <fsm_automatic_run+0x2d0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d106      	bne.n	80005cc <fsm_automatic_run+0x1d4>
				{
					status = AUTONUM_1;
 80005be:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80005c0:	2215      	movs	r2, #21
 80005c2:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80005c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005c8:	f000 ff56 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 80005cc:	f7ff fdd0 	bl	8000170 <INCPressed>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d106      	bne.n	80005e4 <fsm_automatic_run+0x1ec>
				{
					status = NUM_3;
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80005d8:	2203      	movs	r2, #3
 80005da:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80005dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80005e0:	f000 ff4a 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 80005e4:	f7ff fdd6 	bl	8000194 <DECPressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d106      	bne.n	80005fc <fsm_automatic_run+0x204>
				{
					status = NUM_1;
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80005f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f8:	f000 ff3e 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 80005fc:	f7ff fda6 	bl	800014c <RESETPressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	f040 8262 	bne.w	8000acc <fsm_automatic_run+0x6d4>
				{
					status = NUM_0;
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <fsm_automatic_run+0x2c8>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800060e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000612:	f000 ff31 	bl	8001478 <setTimer1>
				}

			break;
 8000616:	e259      	b.n	8000acc <fsm_automatic_run+0x6d4>
		case AUTONUM_3:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//3
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	4829      	ldr	r0, [pc, #164]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800061e:	f001 fb4c 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	4827      	ldr	r0, [pc, #156]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000628:	f001 fb47 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000632:	f001 fb42 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	4822      	ldr	r0, [pc, #136]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800063c:	f001 fb3d 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	481f      	ldr	r0, [pc, #124]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000646:	f001 fb38 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2120      	movs	r1, #32
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <fsm_automatic_run+0x2cc>)
 8000650:	f001 fb33 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <fsm_automatic_run+0x2cc>)
 800065a:	f001 fb2e 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <fsm_automatic_run+0x2d0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d106      	bne.n	8000674 <fsm_automatic_run+0x27c>
				{
					status = AUTONUM_2;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000668:	2216      	movs	r2, #22
 800066a:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800066c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000670:	f000 ff02 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000674:	f7ff fd7c 	bl	8000170 <INCPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d106      	bne.n	800068c <fsm_automatic_run+0x294>
				{
					status = NUM_4;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000680:	2204      	movs	r2, #4
 8000682:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000684:	f242 7010 	movw	r0, #10000	; 0x2710
 8000688:	f000 fef6 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 800068c:	f7ff fd82 	bl	8000194 <DECPressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d106      	bne.n	80006a4 <fsm_automatic_run+0x2ac>
				{
					status = NUM_2;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <fsm_automatic_run+0x2c8>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800069c:	f242 7010 	movw	r0, #10000	; 0x2710
 80006a0:	f000 feea 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 80006a4:	f7ff fd52 	bl	800014c <RESETPressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	f040 8210 	bne.w	8000ad0 <fsm_automatic_run+0x6d8>
				{
					status = NUM_0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <fsm_automatic_run+0x2c8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80006b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006ba:	f000 fedd 	bl	8001478 <setTimer1>
				}

			break;
 80006be:	e207      	b.n	8000ad0 <fsm_automatic_run+0x6d8>
 80006c0:	20000070 	.word	0x20000070
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	200000c0 	.word	0x200000c0
		case AUTONUM_4:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, SET);	//4
 80006cc:	2201      	movs	r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	48a6      	ldr	r0, [pc, #664]	; (800096c <fsm_automatic_run+0x574>)
 80006d2:	f001 faf2 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2102      	movs	r1, #2
 80006da:	48a4      	ldr	r0, [pc, #656]	; (800096c <fsm_automatic_run+0x574>)
 80006dc:	f001 faed 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2104      	movs	r1, #4
 80006e4:	48a1      	ldr	r0, [pc, #644]	; (800096c <fsm_automatic_run+0x574>)
 80006e6:	f001 fae8 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2108      	movs	r1, #8
 80006ee:	489f      	ldr	r0, [pc, #636]	; (800096c <fsm_automatic_run+0x574>)
 80006f0:	f001 fae3 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	489c      	ldr	r0, [pc, #624]	; (800096c <fsm_automatic_run+0x574>)
 80006fa:	f001 fade 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	489a      	ldr	r0, [pc, #616]	; (800096c <fsm_automatic_run+0x574>)
 8000704:	f001 fad9 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4897      	ldr	r0, [pc, #604]	; (800096c <fsm_automatic_run+0x574>)
 800070e:	f001 fad4 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 8000712:	4b97      	ldr	r3, [pc, #604]	; (8000970 <fsm_automatic_run+0x578>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d106      	bne.n	8000728 <fsm_automatic_run+0x330>
				{
					status = AUTONUM_3;
 800071a:	4b96      	ldr	r3, [pc, #600]	; (8000974 <fsm_automatic_run+0x57c>)
 800071c:	2217      	movs	r2, #23
 800071e:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000720:	f242 7010 	movw	r0, #10000	; 0x2710
 8000724:	f000 fea8 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000728:	f7ff fd22 	bl	8000170 <INCPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <fsm_automatic_run+0x348>
				{
					status = NUM_5;
 8000732:	4b90      	ldr	r3, [pc, #576]	; (8000974 <fsm_automatic_run+0x57c>)
 8000734:	2205      	movs	r2, #5
 8000736:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000738:	f242 7010 	movw	r0, #10000	; 0x2710
 800073c:	f000 fe9c 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 8000740:	f7ff fd28 	bl	8000194 <DECPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d106      	bne.n	8000758 <fsm_automatic_run+0x360>
				{
					status = NUM_3;
 800074a:	4b8a      	ldr	r3, [pc, #552]	; (8000974 <fsm_automatic_run+0x57c>)
 800074c:	2203      	movs	r2, #3
 800074e:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000750:	f242 7010 	movw	r0, #10000	; 0x2710
 8000754:	f000 fe90 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000758:	f7ff fcf8 	bl	800014c <RESETPressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	f040 81b8 	bne.w	8000ad4 <fsm_automatic_run+0x6dc>
				{
					status = NUM_0;
 8000764:	4b83      	ldr	r3, [pc, #524]	; (8000974 <fsm_automatic_run+0x57c>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 800076a:	f242 7010 	movw	r0, #10000	; 0x2710
 800076e:	f000 fe83 	bl	8001478 <setTimer1>
				}
			break;
 8000772:	e1af      	b.n	8000ad4 <fsm_automatic_run+0x6dc>
		case AUTONUM_5:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//5
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	487c      	ldr	r0, [pc, #496]	; (800096c <fsm_automatic_run+0x574>)
 800077a:	f001 fa9e 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2102      	movs	r1, #2
 8000782:	487a      	ldr	r0, [pc, #488]	; (800096c <fsm_automatic_run+0x574>)
 8000784:	f001 fa99 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2104      	movs	r1, #4
 800078c:	4877      	ldr	r0, [pc, #476]	; (800096c <fsm_automatic_run+0x574>)
 800078e:	f001 fa94 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	4875      	ldr	r0, [pc, #468]	; (800096c <fsm_automatic_run+0x574>)
 8000798:	f001 fa8f 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2110      	movs	r1, #16
 80007a0:	4872      	ldr	r0, [pc, #456]	; (800096c <fsm_automatic_run+0x574>)
 80007a2:	f001 fa8a 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4870      	ldr	r0, [pc, #448]	; (800096c <fsm_automatic_run+0x574>)
 80007ac:	f001 fa85 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	486d      	ldr	r0, [pc, #436]	; (800096c <fsm_automatic_run+0x574>)
 80007b6:	f001 fa80 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 80007ba:	4b6d      	ldr	r3, [pc, #436]	; (8000970 <fsm_automatic_run+0x578>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d106      	bne.n	80007d0 <fsm_automatic_run+0x3d8>
				{
					status = AUTONUM_4;
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <fsm_automatic_run+0x57c>)
 80007c4:	2218      	movs	r2, #24
 80007c6:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80007c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80007cc:	f000 fe54 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 80007d0:	f7ff fcce 	bl	8000170 <INCPressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d106      	bne.n	80007e8 <fsm_automatic_run+0x3f0>
				{
					status = NUM_6;
 80007da:	4b66      	ldr	r3, [pc, #408]	; (8000974 <fsm_automatic_run+0x57c>)
 80007dc:	2206      	movs	r2, #6
 80007de:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80007e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007e4:	f000 fe48 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 80007e8:	f7ff fcd4 	bl	8000194 <DECPressed>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d106      	bne.n	8000800 <fsm_automatic_run+0x408>
				{
					status = NUM_4;
 80007f2:	4b60      	ldr	r3, [pc, #384]	; (8000974 <fsm_automatic_run+0x57c>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80007f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80007fc:	f000 fe3c 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000800:	f7ff fca4 	bl	800014c <RESETPressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	f040 8166 	bne.w	8000ad8 <fsm_automatic_run+0x6e0>
				{
					status = NUM_0;
 800080c:	4b59      	ldr	r3, [pc, #356]	; (8000974 <fsm_automatic_run+0x57c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000812:	f242 7010 	movw	r0, #10000	; 0x2710
 8000816:	f000 fe2f 	bl	8001478 <setTimer1>
				}
			break;
 800081a:	e15d      	b.n	8000ad8 <fsm_automatic_run+0x6e0>
		case AUTONUM_6:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//6
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	4852      	ldr	r0, [pc, #328]	; (800096c <fsm_automatic_run+0x574>)
 8000822:	f001 fa4a 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	4850      	ldr	r0, [pc, #320]	; (800096c <fsm_automatic_run+0x574>)
 800082c:	f001 fa45 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	484d      	ldr	r0, [pc, #308]	; (800096c <fsm_automatic_run+0x574>)
 8000836:	f001 fa40 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2108      	movs	r1, #8
 800083e:	484b      	ldr	r0, [pc, #300]	; (800096c <fsm_automatic_run+0x574>)
 8000840:	f001 fa3b 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2110      	movs	r1, #16
 8000848:	4848      	ldr	r0, [pc, #288]	; (800096c <fsm_automatic_run+0x574>)
 800084a:	f001 fa36 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	4846      	ldr	r0, [pc, #280]	; (800096c <fsm_automatic_run+0x574>)
 8000854:	f001 fa31 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4843      	ldr	r0, [pc, #268]	; (800096c <fsm_automatic_run+0x574>)
 800085e:	f001 fa2c 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 8000862:	4b43      	ldr	r3, [pc, #268]	; (8000970 <fsm_automatic_run+0x578>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <fsm_automatic_run+0x480>
				{
					status = AUTONUM_5;
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <fsm_automatic_run+0x57c>)
 800086c:	2219      	movs	r2, #25
 800086e:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000870:	f242 7010 	movw	r0, #10000	; 0x2710
 8000874:	f000 fe00 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000878:	f7ff fc7a 	bl	8000170 <INCPressed>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <fsm_automatic_run+0x498>
				{
					status = NUM_7;
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <fsm_automatic_run+0x57c>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000888:	f242 7010 	movw	r0, #10000	; 0x2710
 800088c:	f000 fdf4 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 8000890:	f7ff fc80 	bl	8000194 <DECPressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d106      	bne.n	80008a8 <fsm_automatic_run+0x4b0>
				{
					status = NUM_5;
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <fsm_automatic_run+0x57c>)
 800089c:	2205      	movs	r2, #5
 800089e:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80008a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80008a4:	f000 fde8 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 80008a8:	f7ff fc50 	bl	800014c <RESETPressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	f040 8114 	bne.w	8000adc <fsm_automatic_run+0x6e4>
				{
					status = NUM_0;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <fsm_automatic_run+0x57c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80008ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80008be:	f000 fddb 	bl	8001478 <setTimer1>
				}
			break;
 80008c2:	e10b      	b.n	8000adc <fsm_automatic_run+0x6e4>
		case AUTONUM_7:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//7
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	4828      	ldr	r0, [pc, #160]	; (800096c <fsm_automatic_run+0x574>)
 80008ca:	f001 f9f6 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	4826      	ldr	r0, [pc, #152]	; (800096c <fsm_automatic_run+0x574>)
 80008d4:	f001 f9f1 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	4823      	ldr	r0, [pc, #140]	; (800096c <fsm_automatic_run+0x574>)
 80008de:	f001 f9ec 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2108      	movs	r1, #8
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <fsm_automatic_run+0x574>)
 80008e8:	f001 f9e7 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <fsm_automatic_run+0x574>)
 80008f2:	f001 f9e2 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <fsm_automatic_run+0x574>)
 80008fc:	f001 f9dd 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	4819      	ldr	r0, [pc, #100]	; (800096c <fsm_automatic_run+0x574>)
 8000906:	f001 f9d8 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <fsm_automatic_run+0x578>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d106      	bne.n	8000920 <fsm_automatic_run+0x528>
				{
					status = AUTONUM_6;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <fsm_automatic_run+0x57c>)
 8000914:	221a      	movs	r2, #26
 8000916:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000918:	f242 7010 	movw	r0, #10000	; 0x2710
 800091c:	f000 fdac 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000920:	f7ff fc26 	bl	8000170 <INCPressed>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d106      	bne.n	8000938 <fsm_automatic_run+0x540>
				{
					status = NUM_8;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <fsm_automatic_run+0x57c>)
 800092c:	2208      	movs	r2, #8
 800092e:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000930:	f242 7010 	movw	r0, #10000	; 0x2710
 8000934:	f000 fda0 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 8000938:	f7ff fc2c 	bl	8000194 <DECPressed>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d106      	bne.n	8000950 <fsm_automatic_run+0x558>
				{
					status = NUM_6;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <fsm_automatic_run+0x57c>)
 8000944:	2206      	movs	r2, #6
 8000946:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000948:	f242 7010 	movw	r0, #10000	; 0x2710
 800094c:	f000 fd94 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000950:	f7ff fbfc 	bl	800014c <RESETPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	f040 80c2 	bne.w	8000ae0 <fsm_automatic_run+0x6e8>
				{
					status = NUM_0;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <fsm_automatic_run+0x57c>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000962:	f242 7010 	movw	r0, #10000	; 0x2710
 8000966:	f000 fd87 	bl	8001478 <setTimer1>
				}
			break;
 800096a:	e0b9      	b.n	8000ae0 <fsm_automatic_run+0x6e8>
 800096c:	40010c00 	.word	0x40010c00
 8000970:	200000c0 	.word	0x200000c0
 8000974:	20000070 	.word	0x20000070
		case AUTONUM_8:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//8
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	485c      	ldr	r0, [pc, #368]	; (8000af0 <fsm_automatic_run+0x6f8>)
 800097e:	f001 f99c 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	485a      	ldr	r0, [pc, #360]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000988:	f001 f997 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4857      	ldr	r0, [pc, #348]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000992:	f001 f992 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4855      	ldr	r0, [pc, #340]	; (8000af0 <fsm_automatic_run+0x6f8>)
 800099c:	f001 f98d 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	4852      	ldr	r0, [pc, #328]	; (8000af0 <fsm_automatic_run+0x6f8>)
 80009a6:	f001 f988 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4850      	ldr	r0, [pc, #320]	; (8000af0 <fsm_automatic_run+0x6f8>)
 80009b0:	f001 f983 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	484d      	ldr	r0, [pc, #308]	; (8000af0 <fsm_automatic_run+0x6f8>)
 80009ba:	f001 f97e 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <fsm_automatic_run+0x6fc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d106      	bne.n	80009d4 <fsm_automatic_run+0x5dc>
				{
					status = AUTONUM_7;
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <fsm_automatic_run+0x700>)
 80009c8:	221b      	movs	r2, #27
 80009ca:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80009cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80009d0:	f000 fd52 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 80009d4:	f7ff fbcc 	bl	8000170 <INCPressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d106      	bne.n	80009ec <fsm_automatic_run+0x5f4>
				{
					status = NUM_9;
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <fsm_automatic_run+0x700>)
 80009e0:	2209      	movs	r2, #9
 80009e2:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80009e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80009e8:	f000 fd46 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 80009ec:	f7ff fbd2 	bl	8000194 <DECPressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d106      	bne.n	8000a04 <fsm_automatic_run+0x60c>
				{
					status = NUM_7;
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <fsm_automatic_run+0x700>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 80009fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a00:	f000 fd3a 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000a04:	f7ff fba2 	bl	800014c <RESETPressed>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d16a      	bne.n	8000ae4 <fsm_automatic_run+0x6ec>
				{
					status = NUM_0;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <fsm_automatic_run+0x700>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000a14:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a18:	f000 fd2e 	bl	8001478 <setTimer1>
				}
			break;
 8000a1c:	e062      	b.n	8000ae4 <fsm_automatic_run+0x6ec>
		case AUTONUM_9:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//9
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2101      	movs	r1, #1
 8000a22:	4833      	ldr	r0, [pc, #204]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a24:	f001 f949 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4830      	ldr	r0, [pc, #192]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a2e:	f001 f944 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2104      	movs	r1, #4
 8000a36:	482e      	ldr	r0, [pc, #184]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a38:	f001 f93f 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2108      	movs	r1, #8
 8000a40:	482b      	ldr	r0, [pc, #172]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a42:	f001 f93a 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4829      	ldr	r0, [pc, #164]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a4c:	f001 f935 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	4826      	ldr	r0, [pc, #152]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a56:	f001 f930 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <fsm_automatic_run+0x6f8>)
 8000a60:	f001 f92b 	bl	8001cba <HAL_GPIO_WritePin>

		  		if (timer1_flag == 1)
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <fsm_automatic_run+0x6fc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d106      	bne.n	8000a7a <fsm_automatic_run+0x682>
				{
					status = AUTONUM_8;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <fsm_automatic_run+0x700>)
 8000a6e:	221c      	movs	r2, #28
 8000a70:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000a72:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a76:	f000 fcff 	bl	8001478 <setTimer1>
				}
				if (INCPressed() == 1)
 8000a7a:	f7ff fb79 	bl	8000170 <INCPressed>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d106      	bne.n	8000a92 <fsm_automatic_run+0x69a>
				{
					status = NUM_0;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <fsm_automatic_run+0x700>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000a8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a8e:	f000 fcf3 	bl	8001478 <setTimer1>
				}
				if (DECPressed() == 1)
 8000a92:	f7ff fb7f 	bl	8000194 <DECPressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <fsm_automatic_run+0x6b2>
				{
					status = NUM_8;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <fsm_automatic_run+0x700>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000aa2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aa6:	f000 fce7 	bl	8001478 <setTimer1>
				}
				if (RESETPressed() == 1)
 8000aaa:	f7ff fb4f 	bl	800014c <RESETPressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d119      	bne.n	8000ae8 <fsm_automatic_run+0x6f0>
				{
					status = NUM_0;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <fsm_automatic_run+0x700>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
					setTimer1(10000);
 8000aba:	f242 7010 	movw	r0, #10000	; 0x2710
 8000abe:	f000 fcdb 	bl	8001478 <setTimer1>
				}
			break;
 8000ac2:	e011      	b.n	8000ae8 <fsm_automatic_run+0x6f0>
			break;
 8000ac4:	bf00      	nop
 8000ac6:	e010      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e00e      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000acc:	bf00      	nop
 8000ace:	e00c      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e00a      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ad4:	bf00      	nop
 8000ad6:	e008      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ad8:	bf00      	nop
 8000ada:	e006      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000adc:	bf00      	nop
 8000ade:	e004      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ae0:	bf00      	nop
 8000ae2:	e002      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ae4:	bf00      	nop
 8000ae6:	e000      	b.n	8000aea <fsm_automatic_run+0x6f2>
			break;
 8000ae8:	bf00      	nop
	}
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	20000070 	.word	0x20000070

08000afc <fsm_simple_button_run>:
 */

#include "fsm_simple_button.h"

void fsm_simple_button_run()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	switch(status)
 8000b00:	4baf      	ldr	r3, [pc, #700]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	f200 835d 	bhi.w	80011c4 <fsm_simple_button_run+0x6c8>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <fsm_simple_button_run+0x14>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b39 	.word	0x08000b39
 8000b14:	08000bc9 	.word	0x08000bc9
 8000b18:	08000c71 	.word	0x08000c71
 8000b1c:	08000d19 	.word	0x08000d19
 8000b20:	08000dcd 	.word	0x08000dcd
 8000b24:	08000e75 	.word	0x08000e75
 8000b28:	08000f1d 	.word	0x08000f1d
 8000b2c:	08000fc5 	.word	0x08000fc5
 8000b30:	08001079 	.word	0x08001079
 8000b34:	0800111f 	.word	0x0800111f
	{
		case NUM_0:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);  //0
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	48a1      	ldr	r0, [pc, #644]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b3e:	f001 f8bc 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2102      	movs	r1, #2
 8000b46:	489f      	ldr	r0, [pc, #636]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b48:	f001 f8b7 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2104      	movs	r1, #4
 8000b50:	489c      	ldr	r0, [pc, #624]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b52:	f001 f8b2 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	489a      	ldr	r0, [pc, #616]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b5c:	f001 f8ad 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	4897      	ldr	r0, [pc, #604]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b66:	f001 f8a8 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4895      	ldr	r0, [pc, #596]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b70:	f001 f8a3 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4892      	ldr	r0, [pc, #584]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000b7a:	f001 f89e 	bl	8001cba <HAL_GPIO_WritePin>

	  		if (timer1_flag == 1)
 8000b7e:	4b92      	ldr	r3, [pc, #584]	; (8000dc8 <fsm_simple_button_run+0x2cc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d106      	bne.n	8000b94 <fsm_simple_button_run+0x98>
	  		{
	  			status = AUTONUM_0;
 8000b86:	4b8e      	ldr	r3, [pc, #568]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000b88:	2214      	movs	r2, #20
 8000b8a:	601a      	str	r2, [r3, #0]
	  			setTimer1(10000);
 8000b8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b90:	f000 fc72 	bl	8001478 <setTimer1>
	  		}

			if (INCPressed() == 1)
 8000b94:	f7ff faec 	bl	8000170 <INCPressed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d106      	bne.n	8000bac <fsm_simple_button_run+0xb0>
			{
				status = NUM_1;
 8000b9e:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ba8:	f000 fc66 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000bac:	f7ff faf2 	bl	8000194 <DECPressed>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	f040 8308 	bne.w	80011c8 <fsm_simple_button_run+0x6cc>
			{
				status = NUM_9;
 8000bb8:	4b81      	ldr	r3, [pc, #516]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000bba:	2209      	movs	r2, #9
 8000bbc:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000bbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bc2:	f000 fc59 	bl	8001478 <setTimer1>
			}
			break;
 8000bc6:	e2ff      	b.n	80011c8 <fsm_simple_button_run+0x6cc>
		case NUM_1:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, SET);	//1
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	487d      	ldr	r0, [pc, #500]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000bce:	f001 f874 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	487b      	ldr	r0, [pc, #492]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000bd8:	f001 f86f 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	4878      	ldr	r0, [pc, #480]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000be2:	f001 f86a 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2108      	movs	r1, #8
 8000bea:	4876      	ldr	r0, [pc, #472]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000bec:	f001 f865 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4873      	ldr	r0, [pc, #460]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000bf6:	f001 f860 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4871      	ldr	r0, [pc, #452]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c00:	f001 f85b 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	486e      	ldr	r0, [pc, #440]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c0a:	f001 f856 	bl	8001cba <HAL_GPIO_WritePin>

		  	if (timer1_flag == 1)
 8000c0e:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <fsm_simple_button_run+0x2cc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d106      	bne.n	8000c24 <fsm_simple_button_run+0x128>
		  	{
		  		status = AUTONUM_0;
 8000c16:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000c18:	2214      	movs	r2, #20
 8000c1a:	601a      	str	r2, [r3, #0]
		  		setTimer1(10000);
 8000c1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c20:	f000 fc2a 	bl	8001478 <setTimer1>
		  	}

			if (INCPressed() == 1)
 8000c24:	f7ff faa4 	bl	8000170 <INCPressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <fsm_simple_button_run+0x140>
			{
				status = NUM_2;
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000c34:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c38:	f000 fc1e 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000c3c:	f7ff faaa 	bl	8000194 <DECPressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d106      	bne.n	8000c54 <fsm_simple_button_run+0x158>
			{
				status = NUM_0;
 8000c46:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000c4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c50:	f000 fc12 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000c54:	f7ff fa7a 	bl	800014c <RESETPressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	f040 82b6 	bne.w	80011cc <fsm_simple_button_run+0x6d0>
			{
				status = NUM_0;
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c6a:	f000 fc05 	bl	8001478 <setTimer1>
			}
			break;
 8000c6e:	e2ad      	b.n	80011cc <fsm_simple_button_run+0x6d0>
		case NUM_2:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//2
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c76:	f001 f820 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c80:	f001 f81b 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	484e      	ldr	r0, [pc, #312]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c8a:	f001 f816 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	484c      	ldr	r0, [pc, #304]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c94:	f001 f811 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4849      	ldr	r0, [pc, #292]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000c9e:	f001 f80c 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4847      	ldr	r0, [pc, #284]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000ca8:	f001 f807 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4844      	ldr	r0, [pc, #272]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000cb2:	f001 f802 	bl	8001cba <HAL_GPIO_WritePin>

	  		if (timer1_flag == 1)
 8000cb6:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <fsm_simple_button_run+0x2cc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <fsm_simple_button_run+0x1d0>
	  		{
	 		  	status = AUTONUM_1;
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000cc0:	2215      	movs	r2, #21
 8000cc2:	601a      	str	r2, [r3, #0]
	  	  		setTimer1(10000);
 8000cc4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cc8:	f000 fbd6 	bl	8001478 <setTimer1>
		  	}

			if (INCPressed() == 1)
 8000ccc:	f7ff fa50 	bl	8000170 <INCPressed>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d106      	bne.n	8000ce4 <fsm_simple_button_run+0x1e8>
			{
				status = NUM_3;
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000cdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ce0:	f000 fbca 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000ce4:	f7ff fa56 	bl	8000194 <DECPressed>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <fsm_simple_button_run+0x200>
			{
				status = NUM_1;
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000cf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cf8:	f000 fbbe 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000cfc:	f7ff fa26 	bl	800014c <RESETPressed>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	f040 8264 	bne.w	80011d0 <fsm_simple_button_run+0x6d4>
			{
				status = NUM_0;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000d0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d12:	f000 fbb1 	bl	8001478 <setTimer1>
			}
			break;
 8000d16:	e25b      	b.n	80011d0 <fsm_simple_button_run+0x6d4>
		case NUM_3:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d1e:	f000 ffcc 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2102      	movs	r1, #2
 8000d26:	4827      	ldr	r0, [pc, #156]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d28:	f000 ffc7 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d32:	f000 ffc2 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2108      	movs	r1, #8
 8000d3a:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d3c:	f000 ffbd 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d46:	f000 ffb8 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d50:	f000 ffb3 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <fsm_simple_button_run+0x2c8>)
 8000d5a:	f000 ffae 	bl	8001cba <HAL_GPIO_WritePin>

		  	if (timer1_flag == 1)
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <fsm_simple_button_run+0x2cc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <fsm_simple_button_run+0x278>
		  	{
		 		status = AUTONUM_2;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000d68:	2216      	movs	r2, #22
 8000d6a:	601a      	str	r2, [r3, #0]
		  	  	setTimer1(10000);
 8000d6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d70:	f000 fb82 	bl	8001478 <setTimer1>
			}
			if (INCPressed() == 1)
 8000d74:	f7ff f9fc 	bl	8000170 <INCPressed>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d106      	bne.n	8000d8c <fsm_simple_button_run+0x290>
			{
				status = NUM_4;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000d84:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d88:	f000 fb76 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000d8c:	f7ff fa02 	bl	8000194 <DECPressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d106      	bne.n	8000da4 <fsm_simple_button_run+0x2a8>
			{
				status = NUM_2;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000d9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000da0:	f000 fb6a 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000da4:	f7ff f9d2 	bl	800014c <RESETPressed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	f040 8212 	bne.w	80011d4 <fsm_simple_button_run+0x6d8>
			{
				status = NUM_0;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <fsm_simple_button_run+0x2c4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000db6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dba:	f000 fb5d 	bl	8001478 <setTimer1>
			}
			break;
 8000dbe:	e209      	b.n	80011d4 <fsm_simple_button_run+0x6d8>
 8000dc0:	20000070 	.word	0x20000070
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	200000c0 	.word	0x200000c0
		case NUM_4:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, SET);	//4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	48a6      	ldr	r0, [pc, #664]	; (800106c <fsm_simple_button_run+0x570>)
 8000dd2:	f000 ff72 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	48a4      	ldr	r0, [pc, #656]	; (800106c <fsm_simple_button_run+0x570>)
 8000ddc:	f000 ff6d 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	48a1      	ldr	r0, [pc, #644]	; (800106c <fsm_simple_button_run+0x570>)
 8000de6:	f000 ff68 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2108      	movs	r1, #8
 8000dee:	489f      	ldr	r0, [pc, #636]	; (800106c <fsm_simple_button_run+0x570>)
 8000df0:	f000 ff63 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	489c      	ldr	r0, [pc, #624]	; (800106c <fsm_simple_button_run+0x570>)
 8000dfa:	f000 ff5e 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	489a      	ldr	r0, [pc, #616]	; (800106c <fsm_simple_button_run+0x570>)
 8000e04:	f000 ff59 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	4897      	ldr	r0, [pc, #604]	; (800106c <fsm_simple_button_run+0x570>)
 8000e0e:	f000 ff54 	bl	8001cba <HAL_GPIO_WritePin>

		  	if (timer1_flag == 1)
 8000e12:	4b97      	ldr	r3, [pc, #604]	; (8001070 <fsm_simple_button_run+0x574>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d106      	bne.n	8000e28 <fsm_simple_button_run+0x32c>
		  	{
		 		status = AUTONUM_3;
 8000e1a:	4b96      	ldr	r3, [pc, #600]	; (8001074 <fsm_simple_button_run+0x578>)
 8000e1c:	2217      	movs	r2, #23
 8000e1e:	601a      	str	r2, [r3, #0]
		  	  	setTimer1(10000);
 8000e20:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e24:	f000 fb28 	bl	8001478 <setTimer1>
			}

			if (INCPressed() == 1)
 8000e28:	f7ff f9a2 	bl	8000170 <INCPressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d106      	bne.n	8000e40 <fsm_simple_button_run+0x344>
			{
				status = NUM_5;
 8000e32:	4b90      	ldr	r3, [pc, #576]	; (8001074 <fsm_simple_button_run+0x578>)
 8000e34:	2205      	movs	r2, #5
 8000e36:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000e38:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e3c:	f000 fb1c 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000e40:	f7ff f9a8 	bl	8000194 <DECPressed>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <fsm_simple_button_run+0x35c>
			{
				status = NUM_3;
 8000e4a:	4b8a      	ldr	r3, [pc, #552]	; (8001074 <fsm_simple_button_run+0x578>)
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000e50:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e54:	f000 fb10 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000e58:	f7ff f978 	bl	800014c <RESETPressed>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f040 81ba 	bne.w	80011d8 <fsm_simple_button_run+0x6dc>
			{
				status = NUM_0;
 8000e64:	4b83      	ldr	r3, [pc, #524]	; (8001074 <fsm_simple_button_run+0x578>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000e6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e6e:	f000 fb03 	bl	8001478 <setTimer1>
			}
			break;
 8000e72:	e1b1      	b.n	80011d8 <fsm_simple_button_run+0x6dc>
		case NUM_5:
	  		  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//5
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	487c      	ldr	r0, [pc, #496]	; (800106c <fsm_simple_button_run+0x570>)
 8000e7a:	f000 ff1e 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2102      	movs	r1, #2
 8000e82:	487a      	ldr	r0, [pc, #488]	; (800106c <fsm_simple_button_run+0x570>)
 8000e84:	f000 ff19 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4877      	ldr	r0, [pc, #476]	; (800106c <fsm_simple_button_run+0x570>)
 8000e8e:	f000 ff14 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2108      	movs	r1, #8
 8000e96:	4875      	ldr	r0, [pc, #468]	; (800106c <fsm_simple_button_run+0x570>)
 8000e98:	f000 ff0f 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4872      	ldr	r0, [pc, #456]	; (800106c <fsm_simple_button_run+0x570>)
 8000ea2:	f000 ff0a 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4870      	ldr	r0, [pc, #448]	; (800106c <fsm_simple_button_run+0x570>)
 8000eac:	f000 ff05 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	486d      	ldr	r0, [pc, #436]	; (800106c <fsm_simple_button_run+0x570>)
 8000eb6:	f000 ff00 	bl	8001cba <HAL_GPIO_WritePin>

			if (timer1_flag == 1)
 8000eba:	4b6d      	ldr	r3, [pc, #436]	; (8001070 <fsm_simple_button_run+0x574>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d106      	bne.n	8000ed0 <fsm_simple_button_run+0x3d4>
			{
			 	status = AUTONUM_4;
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <fsm_simple_button_run+0x578>)
 8000ec4:	2218      	movs	r2, #24
 8000ec6:	601a      	str	r2, [r3, #0]
			  	setTimer1(10000);
 8000ec8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ecc:	f000 fad4 	bl	8001478 <setTimer1>
			}

			if (INCPressed() == 1)
 8000ed0:	f7ff f94e 	bl	8000170 <INCPressed>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d106      	bne.n	8000ee8 <fsm_simple_button_run+0x3ec>
			{
				status = NUM_6;
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <fsm_simple_button_run+0x578>)
 8000edc:	2206      	movs	r2, #6
 8000ede:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000ee0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ee4:	f000 fac8 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000ee8:	f7ff f954 	bl	8000194 <DECPressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d106      	bne.n	8000f00 <fsm_simple_button_run+0x404>
			{
				status = NUM_4;
 8000ef2:	4b60      	ldr	r3, [pc, #384]	; (8001074 <fsm_simple_button_run+0x578>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000ef8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000efc:	f000 fabc 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000f00:	f7ff f924 	bl	800014c <RESETPressed>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 8168 	bne.w	80011dc <fsm_simple_button_run+0x6e0>
			{
				status = NUM_0;
 8000f0c:	4b59      	ldr	r3, [pc, #356]	; (8001074 <fsm_simple_button_run+0x578>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000f12:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f16:	f000 faaf 	bl	8001478 <setTimer1>
			}
			break;
 8000f1a:	e15f      	b.n	80011dc <fsm_simple_button_run+0x6e0>
		case NUM_6:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//6
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4852      	ldr	r0, [pc, #328]	; (800106c <fsm_simple_button_run+0x570>)
 8000f22:	f000 feca 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4850      	ldr	r0, [pc, #320]	; (800106c <fsm_simple_button_run+0x570>)
 8000f2c:	f000 fec5 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	484d      	ldr	r0, [pc, #308]	; (800106c <fsm_simple_button_run+0x570>)
 8000f36:	f000 fec0 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	484b      	ldr	r0, [pc, #300]	; (800106c <fsm_simple_button_run+0x570>)
 8000f40:	f000 febb 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	4848      	ldr	r0, [pc, #288]	; (800106c <fsm_simple_button_run+0x570>)
 8000f4a:	f000 feb6 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4846      	ldr	r0, [pc, #280]	; (800106c <fsm_simple_button_run+0x570>)
 8000f54:	f000 feb1 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4843      	ldr	r0, [pc, #268]	; (800106c <fsm_simple_button_run+0x570>)
 8000f5e:	f000 feac 	bl	8001cba <HAL_GPIO_WritePin>

	  		if (timer1_flag == 1)
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <fsm_simple_button_run+0x574>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d106      	bne.n	8000f78 <fsm_simple_button_run+0x47c>
			{
				status = AUTONUM_5;
 8000f6a:	4b42      	ldr	r3, [pc, #264]	; (8001074 <fsm_simple_button_run+0x578>)
 8000f6c:	2219      	movs	r2, #25
 8000f6e:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000f70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f74:	f000 fa80 	bl	8001478 <setTimer1>
			}

			if (INCPressed() == 1)
 8000f78:	f7ff f8fa 	bl	8000170 <INCPressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d106      	bne.n	8000f90 <fsm_simple_button_run+0x494>
			{
				status = NUM_7;
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <fsm_simple_button_run+0x578>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000f88:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f8c:	f000 fa74 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8000f90:	f7ff f900 	bl	8000194 <DECPressed>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <fsm_simple_button_run+0x4ac>
			{
				status = NUM_5;
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <fsm_simple_button_run+0x578>)
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000fa0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fa4:	f000 fa68 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8000fa8:	f7ff f8d0 	bl	800014c <RESETPressed>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	f040 8116 	bne.w	80011e0 <fsm_simple_button_run+0x6e4>
			{
				status = NUM_0;
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <fsm_simple_button_run+0x578>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8000fba:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fbe:	f000 fa5b 	bl	8001478 <setTimer1>
			}
			break;
 8000fc2:	e10d      	b.n	80011e0 <fsm_simple_button_run+0x6e4>
		case NUM_7:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4828      	ldr	r0, [pc, #160]	; (800106c <fsm_simple_button_run+0x570>)
 8000fca:	f000 fe76 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4826      	ldr	r0, [pc, #152]	; (800106c <fsm_simple_button_run+0x570>)
 8000fd4:	f000 fe71 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <fsm_simple_button_run+0x570>)
 8000fde:	f000 fe6c 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <fsm_simple_button_run+0x570>)
 8000fe8:	f000 fe67 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <fsm_simple_button_run+0x570>)
 8000ff2:	f000 fe62 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <fsm_simple_button_run+0x570>)
 8000ffc:	f000 fe5d 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <fsm_simple_button_run+0x570>)
 8001006:	f000 fe58 	bl	8001cba <HAL_GPIO_WritePin>

	  		if (timer1_flag == 1)
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <fsm_simple_button_run+0x574>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d106      	bne.n	8001020 <fsm_simple_button_run+0x524>
			{
				status = AUTONUM_6;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <fsm_simple_button_run+0x578>)
 8001014:	221a      	movs	r2, #26
 8001016:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001018:	f242 7010 	movw	r0, #10000	; 0x2710
 800101c:	f000 fa2c 	bl	8001478 <setTimer1>
			}
			if (INCPressed() == 1)
 8001020:	f7ff f8a6 	bl	8000170 <INCPressed>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d106      	bne.n	8001038 <fsm_simple_button_run+0x53c>
			{
				status = NUM_8;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <fsm_simple_button_run+0x578>)
 800102c:	2208      	movs	r2, #8
 800102e:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001030:	f242 7010 	movw	r0, #10000	; 0x2710
 8001034:	f000 fa20 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8001038:	f7ff f8ac 	bl	8000194 <DECPressed>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d106      	bne.n	8001050 <fsm_simple_button_run+0x554>
			{
				status = NUM_6;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <fsm_simple_button_run+0x578>)
 8001044:	2206      	movs	r2, #6
 8001046:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001048:	f242 7010 	movw	r0, #10000	; 0x2710
 800104c:	f000 fa14 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8001050:	f7ff f87c 	bl	800014c <RESETPressed>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	f040 80c4 	bne.w	80011e4 <fsm_simple_button_run+0x6e8>
			{
				status = NUM_0;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <fsm_simple_button_run+0x578>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001062:	f242 7010 	movw	r0, #10000	; 0x2710
 8001066:	f000 fa07 	bl	8001478 <setTimer1>
			}
			break;
 800106a:	e0bb      	b.n	80011e4 <fsm_simple_button_run+0x6e8>
 800106c:	40010c00 	.word	0x40010c00
 8001070:	200000c0 	.word	0x200000c0
 8001074:	20000070 	.word	0x20000070
		case NUM_8:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//8
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	485d      	ldr	r0, [pc, #372]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 800107e:	f000 fe1c 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	485b      	ldr	r0, [pc, #364]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001088:	f000 fe17 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	4858      	ldr	r0, [pc, #352]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001092:	f000 fe12 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2108      	movs	r1, #8
 800109a:	4856      	ldr	r0, [pc, #344]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 800109c:	f000 fe0d 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2110      	movs	r1, #16
 80010a4:	4853      	ldr	r0, [pc, #332]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 80010a6:	f000 fe08 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	4851      	ldr	r0, [pc, #324]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 80010b0:	f000 fe03 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	484e      	ldr	r0, [pc, #312]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 80010ba:	f000 fdfe 	bl	8001cba <HAL_GPIO_WritePin>

		  	if (timer1_flag == 1)
 80010be:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <fsm_simple_button_run+0x6fc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d106      	bne.n	80010d4 <fsm_simple_button_run+0x5d8>
			{
				status = AUTONUM_7;
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <fsm_simple_button_run+0x700>)
 80010c8:	221b      	movs	r2, #27
 80010ca:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80010cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80010d0:	f000 f9d2 	bl	8001478 <setTimer1>
			}

			if (INCPressed() == 1)
 80010d4:	f7ff f84c 	bl	8000170 <INCPressed>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d106      	bne.n	80010ec <fsm_simple_button_run+0x5f0>
			{
				status = NUM_9;
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <fsm_simple_button_run+0x700>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80010e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80010e8:	f000 f9c6 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 80010ec:	f7ff f852 	bl	8000194 <DECPressed>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <fsm_simple_button_run+0x608>
			{
				status = NUM_7;
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <fsm_simple_button_run+0x700>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80010fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001100:	f000 f9ba 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 8001104:	f7ff f822 	bl	800014c <RESETPressed>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d16c      	bne.n	80011e8 <fsm_simple_button_run+0x6ec>
			{
				status = NUM_0;
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <fsm_simple_button_run+0x700>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001114:	f242 7010 	movw	r0, #10000	; 0x2710
 8001118:	f000 f9ae 	bl	8001478 <setTimer1>
			}
			break;
 800111c:	e064      	b.n	80011e8 <fsm_simple_button_run+0x6ec>
		case NUM_9:
			  HAL_GPIO_WritePin(GPIOB, LED_0_Pin, RESET);	//9
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	4834      	ldr	r0, [pc, #208]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001124:	f000 fdc9 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_1_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	4831      	ldr	r0, [pc, #196]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 800112e:	f000 fdc4 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	482f      	ldr	r0, [pc, #188]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001138:	f000 fdbf 	bl	8001cba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2108      	movs	r1, #8
 8001140:	482c      	ldr	r0, [pc, #176]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001142:	f000 fdba 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_4_Pin, SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	482a      	ldr	r0, [pc, #168]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 800114c:	f000 fdb5 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_5_Pin, RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4827      	ldr	r0, [pc, #156]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001156:	f000 fdb0 	bl	8001cba <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, LED_6_Pin, RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4825      	ldr	r0, [pc, #148]	; (80011f4 <fsm_simple_button_run+0x6f8>)
 8001160:	f000 fdab 	bl	8001cba <HAL_GPIO_WritePin>

		  	if (timer1_flag == 1)
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <fsm_simple_button_run+0x6fc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d106      	bne.n	800117a <fsm_simple_button_run+0x67e>
			{
				status = AUTONUM_8;
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <fsm_simple_button_run+0x700>)
 800116e:	221c      	movs	r2, #28
 8001170:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001172:	f242 7010 	movw	r0, #10000	; 0x2710
 8001176:	f000 f97f 	bl	8001478 <setTimer1>
			}
			if (INCPressed() == 1)
 800117a:	f7fe fff9 	bl	8000170 <INCPressed>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d106      	bne.n	8001192 <fsm_simple_button_run+0x696>
			{
				status = NUM_0;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <fsm_simple_button_run+0x700>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 800118a:	f242 7010 	movw	r0, #10000	; 0x2710
 800118e:	f000 f973 	bl	8001478 <setTimer1>
			}
			if (DECPressed() == 1)
 8001192:	f7fe ffff 	bl	8000194 <DECPressed>
 8001196:	4603      	mov	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <fsm_simple_button_run+0x6ae>
			{
				status = NUM_8;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <fsm_simple_button_run+0x700>)
 800119e:	2208      	movs	r2, #8
 80011a0:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80011a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80011a6:	f000 f967 	bl	8001478 <setTimer1>
			}
			if (RESETPressed() == 1)
 80011aa:	f7fe ffcf 	bl	800014c <RESETPressed>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d11b      	bne.n	80011ec <fsm_simple_button_run+0x6f0>
			{
				status = NUM_0;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <fsm_simple_button_run+0x700>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80011ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80011be:	f000 f95b 	bl	8001478 <setTimer1>
			}
			break;
 80011c2:	e013      	b.n	80011ec <fsm_simple_button_run+0x6f0>
		default:
			break;
 80011c4:	bf00      	nop
 80011c6:	e012      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011c8:	bf00      	nop
 80011ca:	e010      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011cc:	bf00      	nop
 80011ce:	e00e      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011d0:	bf00      	nop
 80011d2:	e00c      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011d4:	bf00      	nop
 80011d6:	e00a      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011d8:	bf00      	nop
 80011da:	e008      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011dc:	bf00      	nop
 80011de:	e006      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011e0:	bf00      	nop
 80011e2:	e004      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011e4:	bf00      	nop
 80011e6:	e002      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <fsm_simple_button_run+0x6f2>
			break;
 80011ec:	bf00      	nop
	}
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	200000c0 	.word	0x200000c0
 80011fc:	20000070 	.word	0x20000070

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 fa56 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f82a 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8b0 	bl	8001370 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001210:	f000 f862 	bl	80012d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <main+0x50>)
 8001216:	f001 f9b9 	bl	800258c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = NUM_9;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <main+0x54>)
 800121c:	2209      	movs	r2, #9
 800121e:	601a      	str	r2, [r3, #0]
  setTimer1(10000);
 8001220:	f242 7010 	movw	r0, #10000	; 0x2710
 8001224:	f000 f928 	bl	8001478 <setTimer1>
  setTimer2(100);
 8001228:	2064      	movs	r0, #100	; 0x64
 800122a:	f000 f941 	bl	80014b0 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_simple_button_run();
 800122e:	f7ff fc65 	bl	8000afc <fsm_simple_button_run>
	  fsm_automatic_run();
 8001232:	f7ff f8e1 	bl	80003f8 <fsm_automatic_run>
	  if (timer2_flag == 1)
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <main+0x58>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d1f7      	bne.n	800122e <main+0x2e>
	  {
		  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800123e:	2120      	movs	r1, #32
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <main+0x5c>)
 8001242:	f000 fd52 	bl	8001cea <HAL_GPIO_TogglePin>
		  setTimer2(1000);
 8001246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124a:	f000 f931 	bl	80014b0 <setTimer2>
	  fsm_simple_button_run();
 800124e:	e7ee      	b.n	800122e <main+0x2e>
 8001250:	20000074 	.word	0x20000074
 8001254:	20000070 	.word	0x20000070
 8001258:	200000c8 	.word	0x200000c8
 800125c:	40010800 	.word	0x40010800

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fd44 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd40 	bl	8001d1c <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012a2:	f000 f8e3 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 ffae 	bl	8002220 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f8cf 	bl	800146c <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM2_Init+0x94>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM2_Init+0x94>)
 80012fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM2_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM2_Init+0x94>)
 800130c:	2209      	movs	r2, #9
 800130e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM2_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM2_Init+0x94>)
 800131e:	f001 f8e5 	bl	80024ec <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001328:	f000 f8a0 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM2_Init+0x94>)
 800133a:	f001 fa7b 	bl	8002834 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 f892 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM2_Init+0x94>)
 8001356:	f001 fc43 	bl	8002be0 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 f884 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000074 	.word	0x20000074

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <MX_GPIO_Init+0xcc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <MX_GPIO_Init+0xcc>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_GPIO_Init+0xcc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_GPIO_Init+0xcc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <MX_GPIO_Init+0xcc>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_GPIO_Init+0xcc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_GPIO_Init+0xcc>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a20      	ldr	r2, [pc, #128]	; (800143c <MX_GPIO_Init+0xcc>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_GPIO_Init+0xcc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2120      	movs	r1, #32
 80013d0:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_GPIO_Init+0xd0>)
 80013d2:	f000 fc72 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80013d6:	2200      	movs	r2, #0
 80013d8:	217f      	movs	r1, #127	; 0x7f
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_GPIO_Init+0xd4>)
 80013dc:	f000 fc6d 	bl	8001cba <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 80013e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_GPIO_Init+0xd8>)
 80013f6:	f000 facd 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80013fa:	2320      	movs	r3, #32
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_GPIO_Init+0xd0>)
 8001412:	f000 fabf 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8001416:	237f      	movs	r3, #127	; 0x7f
 8001418:	613b      	str	r3, [r7, #16]
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_GPIO_Init+0xd4>)
 800142e:	f000 fab1 	bl	8001994 <HAL_GPIO_Init>

}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000

0800144c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	TimerRun();
 8001454:	f000 f848 	bl	80014e8 <TimerRun>
	getKeyInput_RESET();
 8001458:	f7fe feba 	bl	80001d0 <getKeyInput_RESET>
	getKeyInput_INC();
 800145c:	f7fe ff18 	bl	8000290 <getKeyInput_INC>
	getKeyInput_DEC();
 8001460:	f7fe ff76 	bl	8000350 <getKeyInput_DEC>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <setTimer1>:
int timer2_flag = 0;
int timer3_counter =0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	timer1_counter =  duration/TICK;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <setTimer1+0x2c>)
 8001484:	fb82 1203 	smull	r1, r2, r2, r3
 8001488:	1092      	asrs	r2, r2, #2
 800148a:	17db      	asrs	r3, r3, #31
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <setTimer1+0x30>)
 8001490:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <setTimer1+0x34>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	66666667 	.word	0x66666667
 80014a8:	200000bc 	.word	0x200000bc
 80014ac:	200000c0 	.word	0x200000c0

080014b0 <setTimer2>:
void setTimer2(int duration)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	timer2_counter =  duration/TICK;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <setTimer2+0x2c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1092      	asrs	r2, r2, #2
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <setTimer2+0x30>)
 80014c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <setTimer2+0x34>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	66666667 	.word	0x66666667
 80014e0:	200000c4 	.word	0x200000c4
 80014e4:	200000c8 	.word	0x200000c8

080014e8 <TimerRun>:
	timer3_counter =  duration/TICK;
	timer3_flag = 0;
}

void TimerRun()
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <TimerRun+0x6c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd0b      	ble.n	800150c <TimerRun+0x24>
	{
		timer1_counter--;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <TimerRun+0x6c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <TimerRun+0x6c>)
 80014fc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <=0)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <TimerRun+0x6c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dc02      	bgt.n	800150c <TimerRun+0x24>
		{
			timer1_flag = 1;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <TimerRun+0x70>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <TimerRun+0x74>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd0b      	ble.n	800152c <TimerRun+0x44>
	{
		timer2_counter--;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <TimerRun+0x74>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <TimerRun+0x74>)
 800151c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <=0)
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <TimerRun+0x74>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc02      	bgt.n	800152c <TimerRun+0x44>
		{
			timer2_flag = 1;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <TimerRun+0x78>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0)
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <TimerRun+0x7c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd0b      	ble.n	800154c <TimerRun+0x64>
	{
		timer3_counter--;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <TimerRun+0x7c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <TimerRun+0x7c>)
 800153c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <=0)
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <TimerRun+0x7c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dc02      	bgt.n	800154c <TimerRun+0x64>
		{
			timer3_flag = 1;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <TimerRun+0x80>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200000bc 	.word	0x200000bc
 8001558:	200000c0 	.word	0x200000c0
 800155c:	200000c4 	.word	0x200000c4
 8001560:	200000c8 	.word	0x200000c8
 8001564:	200000cc 	.word	0x200000cc
 8001568:	200000d0 	.word	0x200000d0

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_MspInit+0x40>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_MspInit+0x40>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x40>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_MspInit+0x40>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_MspInit+0x40>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_MspInit+0x40>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c0:	d113      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f000 f9a1 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f000 f9ba 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f87f 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM2_IRQHandler+0x10>)
 800164e:	f000 ffe9 	bl	8002624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000074 	.word	0x20000074

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800168e:	f7ff ffe5 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f001 fb0f 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001696:	f7ff fdb3 	bl	8001200 <main>
  bx lr
 800169a:	4770      	bx	lr
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80016a4:	08002d4c 	.word	0x08002d4c
  ldr r2, =_sbss
 80016a8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80016ac:	200000d8 	.word	0x200000d8

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f923 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff ff4c 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f903 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000003c 	.word	0x2000003c
 8001738:	20000044 	.word	0x20000044
 800173c:	20000040 	.word	0x20000040

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x20>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000044 	.word	0x20000044
 8001760:	200000d4 	.word	0x200000d4

08001764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	200000d4 	.word	0x200000d4

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff90 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff2d 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff42 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff35 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e161      	b.n	8001c6c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a8:	2201      	movs	r2, #1
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8150 	bne.w	8001c66 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a97      	ldr	r2, [pc, #604]	; (8001c28 <HAL_GPIO_Init+0x294>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d05e      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019d0:	4a95      	ldr	r2, [pc, #596]	; (8001c28 <HAL_GPIO_Init+0x294>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d875      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019d6:	4a95      	ldr	r2, [pc, #596]	; (8001c2c <HAL_GPIO_Init+0x298>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d058      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019dc:	4a93      	ldr	r2, [pc, #588]	; (8001c2c <HAL_GPIO_Init+0x298>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d86f      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019e2:	4a93      	ldr	r2, [pc, #588]	; (8001c30 <HAL_GPIO_Init+0x29c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d052      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019e8:	4a91      	ldr	r2, [pc, #580]	; (8001c30 <HAL_GPIO_Init+0x29c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d869      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019ee:	4a91      	ldr	r2, [pc, #580]	; (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04c      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019f4:	4a8f      	ldr	r2, [pc, #572]	; (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d863      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019fa:	4a8f      	ldr	r2, [pc, #572]	; (8001c38 <HAL_GPIO_Init+0x2a4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d046      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 8001a00:	4a8d      	ldr	r2, [pc, #564]	; (8001c38 <HAL_GPIO_Init+0x2a4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d85d      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d82a      	bhi.n	8001a60 <HAL_GPIO_Init+0xcc>
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d859      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_GPIO_Init+0x80>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a7b 	.word	0x08001a7b
 8001a20:	08001abd 	.word	0x08001abd
 8001a24:	08001ac3 	.word	0x08001ac3
 8001a28:	08001ac3 	.word	0x08001ac3
 8001a2c:	08001ac3 	.word	0x08001ac3
 8001a30:	08001ac3 	.word	0x08001ac3
 8001a34:	08001ac3 	.word	0x08001ac3
 8001a38:	08001ac3 	.word	0x08001ac3
 8001a3c:	08001ac3 	.word	0x08001ac3
 8001a40:	08001ac3 	.word	0x08001ac3
 8001a44:	08001ac3 	.word	0x08001ac3
 8001a48:	08001ac3 	.word	0x08001ac3
 8001a4c:	08001ac3 	.word	0x08001ac3
 8001a50:	08001ac3 	.word	0x08001ac3
 8001a54:	08001ac3 	.word	0x08001ac3
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a85 	.word	0x08001a85
 8001a60:	4a76      	ldr	r2, [pc, #472]	; (8001c3c <HAL_GPIO_Init+0x2a8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a66:	e02c      	b.n	8001ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e029      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	3304      	adds	r3, #4
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e024      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e01f      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e01a      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a96:	2304      	movs	r3, #4
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e013      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	611a      	str	r2, [r3, #16]
          break;
 8001aae:	e009      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	615a      	str	r2, [r3, #20]
          break;
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          break;
 8001ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d801      	bhi.n	8001ace <HAL_GPIO_Init+0x13a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_Init+0x13e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d802      	bhi.n	8001ae0 <HAL_GPIO_Init+0x14c>
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x152>
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3b08      	subs	r3, #8
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	210f      	movs	r1, #15
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a9 	beq.w	8001c66 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b2c:	4a45      	ldr	r2, [pc, #276]	; (8001c44 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_GPIO_Init+0x2b4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <HAL_GPIO_Init+0x2b8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_GPIO_Init+0x2bc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1d8>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <HAL_GPIO_Init+0x2b0>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	492b      	ldr	r1, [pc, #172]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4921      	ldr	r1, [pc, #132]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	491d      	ldr	r1, [pc, #116]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4917      	ldr	r1, [pc, #92]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4913      	ldr	r1, [pc, #76]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01f      	beq.n	8001c58 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	490d      	ldr	r1, [pc, #52]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
 8001c24:	e01f      	b.n	8001c66 <HAL_GPIO_Init+0x2d2>
 8001c26:	bf00      	nop
 8001c28:	10320000 	.word	0x10320000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10120000 	.word	0x10120000
 8001c3c:	10110000 	.word	0x10110000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	; (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae96 	bne.w	80019a8 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd6:	e003      	b.n	8001ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e272      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8087 	beq.w	8001e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3c:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d00c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d48:	4b8f      	ldr	r3, [pc, #572]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d112      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
 8001d54:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d10b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d06c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x12c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d168      	bne.n	8001e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e24c      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x76>
 8001d84:	4b80      	ldr	r3, [pc, #512]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a7f      	ldr	r2, [pc, #508]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e02e      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x98>
 8001d9a:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xbc>
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a71      	ldr	r2, [pc, #452]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6e      	ldr	r2, [pc, #440]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcb4 	bl	8001764 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fcb0 	bl	8001764 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e200      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b5d      	ldr	r3, [pc, #372]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe4>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fca0 	bl	8001764 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fc9c 	bl	8001764 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1ec      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x10c>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e62:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x18c>
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x176>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1c0      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4939      	ldr	r1, [pc, #228]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x270>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fc55 	bl	8001764 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fc51 	bl	8001764 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e1a1      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4927      	ldr	r1, [pc, #156]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x270>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc34 	bl	8001764 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc30 	bl	8001764 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e180      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d03a      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fc14 	bl	8001764 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc10 	bl	8001764 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e160      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 faa6 	bl	80024b0 <RCC_Delay>
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fbfa 	bl	8001764 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f72:	e00f      	b.n	8001f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fbf6 	bl	8001764 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d908      	bls.n	8001f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e146      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	42420000 	.word	0x42420000
 8001f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b92      	ldr	r3, [pc, #584]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e9      	bne.n	8001f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a6 	beq.w	80020fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b8b      	ldr	r3, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b88      	ldr	r3, [pc, #544]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a87      	ldr	r2, [pc, #540]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fbb7 	bl	8001764 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff fbb3 	bl	8001764 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	; 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e103      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x312>
 8002020:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a6e      	ldr	r2, [pc, #440]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e02d      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x334>
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a66      	ldr	r2, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	e01c      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0x356>
 8002058:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	4b5e      	ldr	r3, [pc, #376]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e00b      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d015      	beq.n	80020be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7ff fb67 	bl	8001764 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff fb63 	bl	8001764 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e0b1      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ee      	beq.n	800209a <HAL_RCC_OscConfig+0x37e>
 80020bc:	e014      	b.n	80020e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fb51 	bl	8001764 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fb4d 	bl	8001764 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e09b      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d061      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d146      	bne.n	80021a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb21 	bl	8001764 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fb1d 	bl	8001764 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e06d      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d108      	bne.n	8002160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4921      	ldr	r1, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a19      	ldr	r1, [r3, #32]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	430b      	orrs	r3, r1
 8002172:	491b      	ldr	r1, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff faf1 	bl	8001764 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff faed 	bl	8001764 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e03d      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x46a>
 80021a4:	e035      	b.n	8002212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fada 	bl	8001764 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff fad6 	bl	8001764 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e026      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x498>
 80021d2:	e01e      	b.n	8002212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e019      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x500>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0d0      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4965      	ldr	r1, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d040      	beq.n	8002340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e073      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4936      	ldr	r1, [pc, #216]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7ff fa28 	bl	8001764 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff fa24 	bl	8001764 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e053      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4922      	ldr	r1, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1cc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f986 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08002d34 	.word	0x08002d34
 80023ec:	2000003c 	.word	0x2000003c
 80023f0:	20000040 	.word	0x20000040

080023f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b490      	push	{r4, r7}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80023fc:	1d3c      	adds	r4, r7, #4
 80023fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002404:	f240 2301 	movw	r3, #513	; 0x201
 8002408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x40>
 800242e:	2b08      	cmp	r3, #8
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x46>
 8002432:	e02b      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	e02b      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3328      	adds	r3, #40	; 0x28
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800244a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0c5b      	lsrs	r3, r3, #17
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	3328      	adds	r3, #40	; 0x28
 8002462:	443b      	add	r3, r7
 8002464:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002468:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246e:	fb03 f202 	mul.w	r2, r3, r2
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	e004      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	623b      	str	r3, [r7, #32]
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800248e:	623b      	str	r3, [r7, #32]
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	6a3b      	ldr	r3, [r7, #32]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc90      	pop	{r4, r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	08002d24 	.word	0x08002d24
 80024a4:	40021000 	.word	0x40021000
 80024a8:	007a1200 	.word	0x007a1200
 80024ac:	003d0900 	.word	0x003d0900

080024b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCC_Delay+0x34>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <RCC_Delay+0x38>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0a5b      	lsrs	r3, r3, #9
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024cc:	bf00      	nop
  }
  while (Delay --);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	60fa      	str	r2, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <RCC_Delay+0x1c>
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	2000003c 	.word	0x2000003c
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f84c 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 fa6a 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e035      	b.n	8002610 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_TIM_Base_Start_IT+0x90>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_TIM_Base_Start_IT+0x4e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d004      	beq.n	80025da <HAL_TIM_Base_Start_IT+0x4e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_TIM_Base_Start_IT+0x94>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d010      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fc:	e007      	b.n	800260e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40000400 	.word	0x40000400

08002624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0202 	mvn.w	r2, #2
 8002650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9b1 	bl	80029ce <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f9a4 	bl	80029bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9b3 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d122      	bne.n	80026d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0204 	mvn.w	r2, #4
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f987 	bl	80029ce <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f97a 	bl	80029bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f989 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0208 	mvn.w	r2, #8
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2204      	movs	r2, #4
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f95d 	bl	80029ce <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f950 	bl	80029bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f95f 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b10      	cmp	r3, #16
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b10      	cmp	r3, #16
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0210 	mvn.w	r2, #16
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2208      	movs	r2, #8
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f933 	bl	80029ce <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f926 	bl	80029bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f935 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0201 	mvn.w	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fe52 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b80      	cmp	r3, #128	; 0x80
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa67 	bl	8002ca2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8f9 	bl	80029f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0220 	mvn.w	r2, #32
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa32 	bl	8002c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIM_ConfigClockSource+0x18>
 8002848:	2302      	movs	r3, #2
 800284a:	e0b3      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x180>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800286a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002872:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002884:	d03e      	beq.n	8002904 <HAL_TIM_ConfigClockSource+0xd0>
 8002886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288a:	f200 8087 	bhi.w	800299c <HAL_TIM_ConfigClockSource+0x168>
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	f000 8085 	beq.w	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289a:	d87f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d01a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0xa2>
 80028a0:	2b70      	cmp	r3, #112	; 0x70
 80028a2:	d87b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d050      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x116>
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d877      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d03c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0xf6>
 80028b0:	2b50      	cmp	r3, #80	; 0x50
 80028b2:	d873      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d058      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x136>
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d86f      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d064      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x156>
 80028c0:	2b30      	cmp	r3, #48	; 0x30
 80028c2:	d86b      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d060      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x156>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d867      	bhi.n	800299c <HAL_TIM_ConfigClockSource+0x168>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05c      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x156>
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d05a      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028d4:	e062      	b.n	800299c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f000 f95c 	bl	8002ba2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
      break;
 8002902:	e04e      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f000 f945 	bl	8002ba2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002926:	609a      	str	r2, [r3, #8]
      break;
 8002928:	e03b      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	461a      	mov	r2, r3
 8002938:	f000 f8bc 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2150      	movs	r1, #80	; 0x50
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f913 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002948:	e02b      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	461a      	mov	r2, r3
 8002958:	f000 f8da 	bl	8002b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2160      	movs	r1, #96	; 0x60
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f903 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002968:	e01b      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	f000 f89c 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f8f3 	bl	8002b6e <TIM_ITRx_SetConfig>
      break;
 8002988:	e00b      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 f8ea 	bl	8002b6e <TIM_ITRx_SetConfig>
        break;
 800299a:	e002      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800299c:	bf00      	nop
 800299e:	e000      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <TIM_Base_SetConfig+0xac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <TIM_Base_SetConfig+0xac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <TIM_Base_SetConfig+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 0210 	bic.w	r2, r3, #16
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	031b      	lsls	r3, r3, #12
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	621a      	str	r2, [r3, #32]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f043 0307 	orr.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	609a      	str	r2, [r3, #8]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e041      	b.n	8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d004      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400

08002c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	4d0c      	ldr	r5, [pc, #48]	; (8002cec <__libc_init_array+0x38>)
 8002cba:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	f000 f822 	bl	8002d0c <_init>
 8002cc8:	2600      	movs	r6, #0
 8002cca:	4d0a      	ldr	r5, [pc, #40]	; (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002d44 	.word	0x08002d44
 8002cf0:	08002d44 	.word	0x08002d44
 8002cf4:	08002d44 	.word	0x08002d44
 8002cf8:	08002d48 	.word	0x08002d48

08002cfc <memset>:
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4402      	add	r2, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
